<!DOCTYPE html>
<html lang="de">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sudoku Generator</title>
    <button id="dark-mode-toggle">Dark Mode</button>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f0e6ff;
            margin: 0;
            padding: 20px;
        }
        #sudoku-container {
            position: relative;
        }
        #timer-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        width: 100%;
        max-width: 450px; /* oder die Breite Ihres Sudoku-Feldes */
    }
        #timer {
            font-size: 18px;
            font-weight: bold;
        }
   #timer-toggle {
        padding: 5px 10px;
        font-size: 16px;
        cursor: pointer;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
 #timer-toggle:hover {
        background-color: #e0e0e0;
    }
        #sudoku {
            display: grid;
            grid-template-columns: repeat(9, 40px);
            gap: 1px;
            background-color: #000;
            border: 2px solid #000;
            margin-bottom: 20px;
        }
        .cell {
            width: 40px;
            height: 40px;
            background-color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 20px;
            cursor: pointer;
            position: relative;
        }
        .cell::after {
            content: '';
            position: absolute;
            right: -1px;
            bottom: -1px;
            width: 1px;
            height: 100%;
            background-color: #000;
        }
        .cell::before {
            content: '';
            position: absolute;
            right: -1px;
            bottom: -1px;
            width: 100%;
            height: 1px;
            background-color: #000;
        }
        .cell:nth-child(3n)::after {
            width: 2px;
        }
        .cell:nth-child(n+19):nth-child(-n+27)::before,
        .cell:nth-child(n+46):nth-child(-n+54)::before {
            height: 2px;
        }
        .cell.hint {
            background-color: yellow;
            transition: background-color 0.3s;
        }
        .fixed {
            font-weight: bold;
            color: #000;
        }
        .user-input {
            font-weight: cursive;
            background-color: #eff6fc;
        }
        .selected {
            background-color: #e1e1e1;
        }
        .highlighted {
            background-color: #ffe0e0;
        }
        #controls, #difficulty {
            margin: 20px 0;
        }
        button {
            font-size: 16px;
            padding: 10px 20px;
            margin: 0 10px;
        }
        #number-pad {
            display: grid;
            grid-template-columns: repeat(9, 40px);
            gap: 5px;
            margin-top: 20px;
        }
        .number-btn {
            width: 40px;
            height: 40px;
            font-size: 18px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #e0e0e0;
            border: 1px solid #999;
            border-radius: 5px;
        }
        .number-btn:hover {
            background-color: #d0d0d0;
        }
        .blurred {
            filter: blur(5px);
        }
body.dark-mode {
    background-color: #333;
    color: #fff;
}
body.dark-mode #sudoku {
    background-color: #666;
}
body.dark-mode .cell {
    background-color: #444;
    color: #fff;
}
body.dark-mode .cell.fixed {
    color: #ccc;
}
body.dark-mode .cell.user-input {
    background-color: #2a4d69;
}
body.dark-mode .cell.selected {
    background-color: #4a2a69;
}
body.dark-mode .cell.highlighted {
    background-color: #692a2a;
}
body.dark-mode .number-btn {
    background-color: #555;
    color: #fff;
    border-color: #777;
}
body.dark-mode .number-btn:hover {
    background-color: #666;
}
#dark-mode-toggle {
    position: absolute;
    top: 10px;
    right: 10px;
    padding: 5px 10px;
    font-size: 14px;
    cursor: pointer;
}
/* Neue Styles für hervorgehobene Zellen im Dark Mode */
    body.dark-mode .cell[style*="background-color"] {
        color: #000; /* Schwarze Schrift für hervorgehobene Zellen */
    }    
/* Dark Mode Anpassungen */
    body.dark-mode #timer-toggle {
        background-color: #555;
        color: #fff;
        border-color: #777;
    }
    body.dark-mode #timer-toggle:hover {
        background-color: #666;
    }
.number-btn {
    /* Bestehende Stile beibehalten */
    position: relative;
}
.number-btn.used-up::after {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    width: 100%;
    height: 2px;
    background-color: red;
    transform: translateY(-50%);
}
    </style>
</head>

<body>
    <h1>Sudoku Generator</h1>
    <div id="difficulty">
        <button onclick="setDifficulty('easy')">Leicht</button>
        <button onclick="setDifficulty('medium')">Mittel</button>
        <button onclick="setDifficulty('hard')">Schwer</button>
        <button onclick="setDifficulty('expert')">Profi</button>
    </div>
    <div id="sudoku-container">
        <div id="timer-container">
            <div id="timer">Zeit: 00:00</div>
            <button id="timer-toggle">Start</button>
        </div>
        <div id="sudoku"></div>
    </div>
    <div id="number-pad"></div>
    <div id="controls">
        <button onclick="newGame()">Neues Spiel</button>
        <button onclick="checkSolution()">Lösung prüfen</button>
    </div>
<div id="highScores">
  <h2>Highscores</h2>
  <ul id="highScoreList"></ul>
</div>
    <script>
        const sudoku = document.getElementById('sudoku');
            const numberPad = document.getElementById('number-pad');
            const timerElement = document.getElementById('timer');
            const timerToggleBtn = document.getElementById('timer-toggle');
            const darkModeToggle = document.getElementById('dark-mode-toggle');
            let selectedCell = null;
            let difficulty = 'medium';
            let startTime;
            let timerInterval;
            let timerRunning = false;
            let numberColors = new Map();
        
            function createBoard() {
                sudoku.innerHTML = '';
                for (let i = 0; i < 81; i++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    cell.addEventListener('click', () => selectCell(cell));
                    sudoku.appendChild(cell);
                }
            }
            function createNumberPad() {
                numberPad.innerHTML = '';
                for (let i = 1; i <= 9; i++) {
                    const button = document.createElement('button');
                    button.textContent = i;
                    button.className = 'number-btn';
                    button.addEventListener('click', () => setNumber(i));
                    numberPad.appendChild(button);
                }
            }
            function selectCell(cell) {
                if (selectedCell) {
                    selectedCell.classList.remove('selected');
                }
                selectedCell = cell;
                selectedCell.classList.add('selected');
                highlightSameNumbers(cell.textContent);
            }
            function setNumber(num) {
                if (selectedCell && !selectedCell.classList.contains('fixed')) {
                    selectedCell.textContent = num;
                    selectedCell.classList.add('user-input');
                    highlightSameNumbers(num.toString());
                }
            }
            function setDifficulty(diff) {
                difficulty = diff;
                newGame();
            }
            function newGame() {
            currentPuzzle = generateSudoku(difficulty);
            generateNumberColors(); // Neue Zeile
            const cells = document.querySelectorAll('.cell');
            cells.forEach((cell, index) => {
                const row = Math.floor(index / 9);
                const col = index % 9;
                if (currentPuzzle[row][col] !== 0) {
                    cell.textContent = currentPuzzle[row][col];
                    cell.classList.add('fixed');
                } else {
                    cell.textContent = '';
                    cell.classList.remove('fixed', 'user-input');
                }
                cell.style.backgroundColor = '';
            });
            startTimer();
            selectedCell = null;
        }
            function startTimer() {
                if (timerInterval) {
                    clearInterval(timerInterval);
                }
                startTime = new Date();
                timerRunning = true;
                timerInterval = setInterval(updateTimer, 1000);
                sudoku.classList.remove('blurred');
                timerToggleBtn.textContent = 'Stopp';
            }
            function updateTimer() {
                const currentTime = new Date();
                const timeDiff = new Date(currentTime - startTime);
                const minutes = timeDiff.getUTCMinutes().toString().padStart(2, '0');
                const seconds = timeDiff.getUTCSeconds().toString().padStart(2, '0');
                timerElement.textContent = `Zeit: ${minutes}:${seconds}`;
            }
            function toggleTimer() {
                if (timerRunning) {
                    clearInterval(timerInterval);
                    timerRunning = false;
                    sudoku.classList.add('blurred');
                    timerToggleBtn.textContent = 'Start';
                } else {
                    startTime = new Date(new Date() - new Date(timerElement.textContent.slice(6)));
                    timerRunning = true;
                    timerInterval = setInterval(updateTimer, 1000);
                    sudoku.classList.remove('blurred');
                    timerToggleBtn.textContent = 'Stopp';
                }
            }
            function generateSudoku(difficulty) {
                const puzzle = Array(9).fill().map(() => Array(9).fill(0));
                const numToRemove = {
                    easy: 30,
                    medium: 40,
                    hard: 50,
                    expert: 60
                };
                for (let i = 0; i < 9; i += 3) {
                    fillBox(puzzle, i, i);
                }
                solveSudoku(puzzle);
                let count = numToRemove[difficulty];
                while (count > 0) {
                    const row = Math.floor(Math.random() * 9);
                    const col = Math.floor(Math.random() * 9);
                    if (puzzle[row][col] !== 0) {
                        puzzle[row][col] = 0;
                        count--;
                    }
                }
                return puzzle;
            }
            function fillBox(puzzle, row, col) {
                const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];
                for (let i = 0; i < 3; i++) {
                    for (let j = 0; j < 3; j++) {
                        const index = Math.floor(Math.random() * nums.length);
                        puzzle[row + i][col + j] = nums[index];
                        nums.splice(index, 1);
                    }
                }
            }
        function generateNumberColors() {
            numberColors.clear();
            for (let i = 1; i <= 9; i++) {
                numberColors.set(i.toString(), getRandomPastelColor());
            }
        }
            function solveSudoku(puzzle) {
                const emptyCell = findEmptyCell(puzzle);
                if (!emptyCell) return true;
        
                const [row, col] = emptyCell;
                for (let num = 1; num <= 9; num++) {
                    if (isValid(puzzle, row, col, num)) {
                        puzzle[row][col] = num;
                        if (solveSudoku(puzzle)) return true;
                        puzzle[row][col] = 0;
                    }
                }
                return false;
            }
            function findEmptyCell(puzzle) {
                for (let i = 0; i < 9; i++) {
                    for (let j = 0; j < 9; j++) {
                        if (puzzle[i][j] === 0) return [i, j];
                    }
                }
                return null;
            }
            function isValid(puzzle, row, col, num) {
                for (let i = 0; i < 9; i++) {
                    if (puzzle[row][i] === num) return false;
                    if (puzzle[i][col] === num) return false;
                    if (puzzle[3 * Math.floor(row / 3) + Math.floor(i / 3)]
                             [3 * Math.floor(col / 3) + i % 3] === num) return false;
                }
                return true;
            }
                function checkSolution() {
                const cells = document.querySelectorAll('.cell');
                const puzzle = Array(9).fill().map(() => Array(9).fill(0));
                cells.forEach((cell, index) => {
                    const row = Math.floor(index / 9);
                    const col = index % 9;
                    puzzle[row][col] = parseInt(cell.textContent) || 0;
                });
                if (isValidSudoku(puzzle)) {
                    clearInterval(timerInterval);
                    const finalTime = timerElement.textContent;
                    alert(`Gratulation! Das Sudoku ist korrekt gelöst. ${finalTime}`);
                } else {
                    alert('Das Sudoku ist noch nicht korrekt gelöst. Versuchen Sie es weiter!');
                }
            }
                function isValidSudoku(puzzle) {
                for (let i = 0; i < 9; i++) {
                    if (!isValidRow(puzzle, i) || !isValidColumn(puzzle, i) || !isValidBox(puzzle, i)) {
                        return false;
                    }
                }
                return true;
            }
                function isValidRow(puzzle, row) {
                const seen = new Set();
                for (let i = 0; i < 9; i++) {
                    if (puzzle[row][i] === 0) return false;
                    if (seen.has(puzzle[row][i])) return false;
                    seen.add(puzzle[row][i]);
                }
                return true;
            }
            function isValidColumn(puzzle, col) {
                const seen = new Set();
                for (let i = 0; i < 9; i++) {
                    if (puzzle[i][col] === 0) return false;
                    if (seen.has(puzzle[i][col])) return false;
                    seen.add(puzzle[i][col]);
                }
                return true;
            }
        
            function isValidBox(puzzle, box) {
                const seen = new Set();
                const rowStart = Math.floor(box / 3) * 3;
                const colStart = (box % 3) * 3;
                for (let i = 0; i < 3; i++) {
                    for (let j = 0; j < 3; j++) {
                        const num = puzzle[rowStart + i][colStart + j];
                        if (num === 0) return false;
                        if (seen.has(num)) return false;
                        seen.add(num);
                    }
                }
                return true;
            }
        
            function toggleDarkMode() {
                document.body.classList.toggle('dark-mode');
                darkModeToggle.textContent = document.body.classList.contains('dark-mode') ? 'Light Mode' : 'Dark Mode';
            }
            function highlightSameNumbers(number) {
            if (!number) return;
            const cells = document.querySelectorAll('.cell');
            const color = numberColors.get(number) || '';
            cells.forEach(cell => {
                if (cell.textContent === number) {
                    cell.style.backgroundColor = color;
                } else {
                    cell.style.backgroundColor = '';
                }
            });
        }
        
            createBoard();
            createNumberPad();
            newGame();
        
            document.addEventListener('keydown', (event) => {
                if (selectedCell && !selectedCell.classList.contains('fixed')) {
                    const key = parseInt(event.key);
                    if (key >= 1 && key <= 9) {
                        setNumber(key);
                    } else if (event.key === 'Backspace' || event.key === 'Delete') {
                        selectedCell.textContent = '';
                        selectedCell.classList.remove('user-input');
                        highlightSameNumbers('');
                    }
                }
            });
        
            timerToggleBtn.addEventListener('click', toggleTimer);
            darkModeToggle.addEventListener('click', toggleDarkMode);
        function getRandomPastelColor() {
            const hue = Math.floor(Math.random() * 360);
            const saturation = 70 + Math.random() * 10; // 70-80%
            const lightness = 80 + Math.random() * 10; // 80-90%
            return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
        }
    </script>
</body>
</html>
